
//brute force that runs the 3 test cases but times
// out for a large array

class Solution {
    public int[] twoSum(int[] numbers, int target) {
       int j = numbers.length;
       int results[] = new int [2];
       for (j=j-1; j>=0;j--)
       {
               for(int i=j-1;i>=0;i--)
               {
                   if(numbers[j]+numbers[i]==target)
                   {
                      results[0] = i+1;
                      results[1] = j+1; 
                   }
               }
           
       }
       return results; 
    }
}

//two pointer method 
class Solution {
    public int[] twoSum(int[] numbers, int target) {
       int i = 0;
       int j = numbers.length-1;

       while(i<j){
           if(numbers[i]+numbers[j]==target)
           return new int [] {i+1,j+1};
           else if(numbers[i] + numbers[j] < target)
           i++;
           else
           j--;
       }
    return new int[]{};    
    }
}

//Map method
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        Map <Integer,Integer> map = new HashMap<>();
       for(int i=0;i<numbers.length;i++){
           int bal=target-numbers[i];
           if(map.containsKey(bal)){
               if(i<map.get(bal))
               return new int[]{i+1,map.get(bal)+1};
               else
               return new int[]{map.get(bal)+1,i+1};
           }
           

           map.put(numbers[i],i);
         }
         return new int[]{};  
    }
}