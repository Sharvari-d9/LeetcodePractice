//Here the brute force method will take n^2 complexity
//another way would be to get total product and divide each element at ith index but then will have to handle division by 0;
//the last approach to get product of the element coming before the ith position and coming after the ith 
// position with two loops and keeping the product in the same output array gives the answer

class Solution {
    public int[] productExceptSelf(int[] nums) {
      int len = nums.length;
      int product = 1;
      int output[] = new int[len];
    //   for(int n : nums)
    //   product*=n;

      
    //   for(int i =0;i<len;i++)
    //   {
    //     output[i] = product/nums[i];
    //   } 
    // for(int i =0 ; i<len;i++)
    // {
    //     product = 1;
    //     for(int j =0; j<len;j++){
    //         if(i!=j)
    //         product*=nums[j];
    //     }
    //     output[i]=product;
    // }
    for(int i=0;i<len;i++)
    {
        output[i]=product;
        product*=nums[i];
    }
    product =1;
    for(int i=len-1;i>=0;i--)
    {
      output[i]*=product;
      product*=nums[i];
    }
      return output;
    }
}  
