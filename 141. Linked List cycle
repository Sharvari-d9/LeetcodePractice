/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

 //This is Floyd's Cycle detection algorithm
public class Solution {

    public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        ListNode fast = head;
        ListNode slow= head;

        while(fast.next!= null && fast.next.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            if(fast==slow)return true;
        }
        return false;                                
    }
}

//time complexity O(n)
//Space complexity O(1)

//Using HashSet

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        HashSet<ListNode> visited = new HashSet<>();

        ListNode curr = head;
        while(curr != null) {
            if(visited.contains(curr)) {
                return true;
            }
            visited.add(curr);
            curr = curr.next;
        }
        return false;
    }
}