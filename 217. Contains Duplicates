//Solution 1 Brute force, compare each element with every other element

class Solution {
    public boolean containsDuplicate(int[] nums) {
        for(int i=0; i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]==nums[j])
                return true;
            }
        }
        return false;       
    }
}

//Solution 2 Sort first and then only check for Adjacent element
lass Solution {
    public boolean containsDuplicate(int[] nums) {

        Arrays.sort(nums);
        for(int i = 1; i<nums.length;i++)
        {
            if(nums[i] == nums[i-1])
            return true;
        }
        return false;      
    }
}

//Solution 3 using set
class Solution {
    public boolean containsDuplicate(int[] nums) {

        HashSet<Integer> seen = new HashSet();
        for(int num: nums){
            if(seen.contains(num))
            {
                return true;
            }
            seen.add(num);
        }
        return false;
    }
}

//solution 4 using HashMap
class Solution {
    public boolean containsDuplicate(int[] nums) {

        HashMap <Integer, Integer> seen = new HashMap<>();
        for(int num: nums){
            if(seen.containsKey(num))
            return true;

            seen.put(num, seen.getOrDefault(num,0)+1);
        }
        return false;
    }
}