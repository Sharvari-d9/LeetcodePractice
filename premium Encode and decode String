//My approach

    public String encode(List<String> strs) {
        int len;
        String encodedString;

        for(String s : strs){
            len=s.length();
            String temp = len.toString();
            encodedString.concat(temp).concat("#").concat(s);
        }

        return encodedString;
    }

    public List<String> decode(String str) {

        List<String> decodedString = new ArrayList<String>();
        int len;
        for(int i=0;i<str.length();)
        {
            len = Integer.parseInt(str[i]);
            decodedString.add(str.substring(i+2,i+2+len));
            i = len+2;
        }
        return decodedString;

    }
    

    //Problems Syntax error and doesnt cover all cases
    //Didnt consider that length can be more than a digiti hence my logic would have been wrong 

    //new thing learnt StringBuilder
class Solution {

    public String encode(List<String> strs) {
    StringBuilder sb = new StringBuilder();
    for (String str : strs) {
        sb.append(str.length()).append('/').append(str);
    }
    return sb.toString();
}

// Decodes a single string to a list of strings.
public List<String> decode(String s) {
    List<String> res = new ArrayList<>();
    int i = 0;
    while (i < s.length()) {
        int slash = s.indexOf('/', i);
        int size = Integer.valueOf(s.substring(i, slash));
        res.add(s.substring(slash + 1, slash + size + 1));
        i = slash + size + 1;
    }
    return res;
}
}

//Just what i was trying to do but with a better class for better and easy imlementation of string manipulation

